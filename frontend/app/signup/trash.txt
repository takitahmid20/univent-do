// src/app/signup/page.jsx
"use client";

import React, { useState } from 'react';
import { Formik, Form, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import Button from '@/components/Button';
import InputField from '@/components/InputField';
import RadioGroup from '@/components/RadioGroup';
import { FaGoogle, FaFacebook } from 'react-icons/fa';
import Link from 'next/link'; 

// Validation schema using Yup
const validationSchema = Yup.object({
  userName: Yup.string().required('Username is required'),
  email: Yup.string().email('Invalid email address').required('Email is required'),
  password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),
  type: Yup.string().required('Please select a type'),
});

const SignUpPage = () => {
  const [selectedType, setSelectedType] = useState('');

  const radioOptions = [
    { value: 'Organizer', label: 'Organizer', description: 'Create and manage events' },
    { value: 'User', label: 'User', description: 'Join and participate in events' },
  ];

  return (
    <Formik
      initialValues={{ userName: '', email: '', password: '', type: '' }}
      validationSchema={validationSchema}
      onSubmit={(values, { setSubmitting }) => {
        // Handle form submission here
        console.log(values);
        setSubmitting(false);
      }}
    >
      {({ isSubmitting, handleChange, values, setFieldValue }) => (
        <Form>
          {/* Social Sign-Up Buttons */}
          <div className="flex space-x-2 mb-4">
            <button type="button" className="text-sm flex-1 flex items-center justify-center text-[#DB4437] border rounded-[10px] p-3 hover:bg-[#DB4437] hover:text-[#fff]">
              <FaGoogle className="mr-2" /> Sign up with Google
            </button>
            <button type="button" className="text-sm flex-1 flex items-center justify-center text-[#1877F2] border rounded-[10px] p-3 hover:bg-[#1877F2] hover:text-[#fff]">
              <FaFacebook className="mr-2" /> Sign up with Facebook
            </button>
          </div>

          <div className="text-center mb-4">
            <span className="text-gray-600">OR</span>
          </div>

          {/* Username Field */}
          <div className="mb-4">
            <label htmlFor="userName" className="block text-gray-700 text-sm font-bold mb-2">Username</label>
            <InputField 
              id="userName"
              placeholder="Enter your username" 
              value={values.userName} 
              onChange={handleChange('userName')} 
            />
            <ErrorMessage name="userName" component="div" className="text-red-600 text-sm" />
          </div>

          {/* Email Field */}
          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 text-sm font-bold mb-2">Email</label>
            <InputField 
              id="email"
              placeholder="Enter your email" 
              value={values.email} 
              onChange={handleChange('email')} 
              type="email" 
            />
            <ErrorMessage name="email" component="div" className="text-red-600 text-sm" />
          </div>

          {/* Password Field */}
          <div className="mb-4">
            <label htmlFor="password" className="block text-gray-700 text-sm font-bold mb-2">Password</label>
            <InputField 
              id="password"
              placeholder="Enter your password" 
              value={values.password} 
              onChange={handleChange('password')} 
              type="password" 
            />
            <ErrorMessage name="password" component="div" className="text-red-600 text-sm" />
          </div>

          {/* Type (Radio Buttons for Organizer/User) */}
          <RadioGroup 
                  name="type" 
                  options={radioOptions.map(option => ({
                    ...option,
                    checked: option.value === radioOptions.find(opt => opt.value === values.type)?.value,
                  }))}
                  onChange={(e) => setFieldValue('type', e.target.value)} // Update Formik's value
                />

          {/* Submit Button */}
          <Button type="submit" className="w-full mt-4" disabled={isSubmitting}>
            {isSubmitting ? 'Creating Account...' : 'Create Account'}
          </Button>

          <p className="text-center mt-4">
            Already have an account? <Link href="/signin" className="text-blue-500">Log In</Link>
          </p>
        </Form>
      )}
    </Formik>
  );
};

export default SignUpPage;
